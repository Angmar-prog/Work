------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) Создать файл calculator.py и реализовать в нем класс Calculator с методами:
	init 
	calc_sum - сумма
	calc_multiply - произведение
	calc_subtract - разность
	calc_divide - деление
2) Создать файл test_calculator.py и опишите модульные тесты по каждому из методов класса Calculator

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Строки в Питоне сравниваются на основании значений символов. 
Т.е. если мы захотим выяснить, что больше: Apple или Яблоко, – то Яблоко окажется бОльшим. А все потому, что английская буква A имеет значение 65 
(берется из таблицы кодировки), а русская буква Я – 1071 (с помощью функции ord() это можно выяснить). Такое положение дел не устроило Анну. 
Она считает, что строки нужно сравнивать по количеству входящих в них символов.
Для этого девушка создала класс RealString и реализовала озвученный инструментарий. 
Сравнивать между собой можно как объекты класса, так и обычные строки с экземплярами класса RealString. 
К слову, Анне понадобилось только 3 метода внутри класса (включая __init__()) для воплощения задуманного.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Николаю требуется проверить, возможно ли из представленных отрезков условной длины сформировать треугольник. 
Для этого он решил создать класс TriangleChecker, принимающий только положительные числа. 
С помощью метода is_triangle() возвращаются следующие значения (в зависимости от ситуации):
– Ура, можно построить треугольник!;
– С отрицательными числами ничего не выйдет!;
– Нужно вводить только числа!;
– Жаль, но из этого треугольник не сделать.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Николай – оригинальный человек. Он решил создать класс Nikola, принимающий при инициализации 2 параметра: имя и возраст. Но на этом он не успокоился. 
Не важно, какое имя передаст пользователь при создании экземпляра, оно всегда будет содержать Николая. 
В частности - если пользователя на самом деле зовут Николаем, то с именем ничего не произойдет, а если его зовут, например, 
Максим, то оно преобразуется в Я не Максим, а Николай.
Более того, никаких других атрибутов и методов у экземпляра не может быть добавлено, даже 
если кто-то и вздумает так поступить (т.е. если некий пользователь решит прибавить к экземпляру свойство отчество или метод приветствие, 
то ничего у такого хитреца не получится).