4.11
#include <iostream>
#include <limits>

class SpeedComparator {
private:
    double kmPerHour;     // Скорость в км/ч
    double metersPerSecond; // Скорость в м/с

public:
    // Метод для ввода значений с проверкой корректности
    void inputSpeeds() {
        while (true) {
            std::cout << "Введите скорость в км/ч: ";
            std::cin >> kmPerHour;
            
            // Проверка на корректность ввода (например, буквы вместо чисел)
            if (std::cin.fail() || kmPerHour < 0) {
                std::cout << "Ошибка: Введите положительное число!\n";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }
            break;
        }

        while (true) {
            std::cout << "Введите скорость в м/с: ";
            std::cin >> metersPerSecond;
            
            // Проверка на корректность ввода и отрицательность
            if (std::cin.fail() || metersPerSecond < 0) {
                std::cout << "Ошибка: Введите положительное число!\n";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }
            break;
        }
    }

    // Метод для сравнения скоростей
    void compare() const {
        // Конвертируем км/ч в м/с (1 км/ч = 1000/3600 м/с)
        double kmToM = kmPerHour * 1000 / 3600;

        if (kmToM > metersPerSecond) {
            std::cout << "Скорость в км/ч (" << kmPerHour << " км/ч) больше.\n";
        } else if (kmToM < metersPerSecond) {
            std::cout << "Скорость в м/с (" << metersPerSecond << " м/с) больше.\n";
        } else {
            std::cout << "Скорости равны.\n";
        }
    }
};

int main() {
    SpeedComparator comparator;
    comparator.inputSpeeds();
    comparator.compare();
    return 0;
}
_____________________________________
4.12
#include <iostream>
#include <cmath>
#include <limits>

class Circle {
private:
    double radius;

public:
    Circle(double r) {
        if (r <= 0) {
            throw std::invalid_argument("Радиус должен быть положительным!");
        }
        radius = r;
    }

    double getArea() const {
        return M_PI * radius * radius;
    }
};

class Square {
private:
    double side;

public:
    Square(double s) {
        if (s <= 0) {
            throw std::invalid_argument("Сторона квадрата должна быть положительной!");
        }
        side = s;
    }

    double getArea() const {
        return side * side;
    }
};

int main() {
    double radius, side;

    // Ввод радиуса
    while (true) {
        std::cout << "Введите радиус круга: ";
        if (std::cin >> radius) {
            if (radius > 0) break;
            else std::cout << "Радиус должен быть положительным!\n";
        } else {
            std::cout << "Ошибка ввода! Введите число.\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
    }

    // Ввод стороны квадрата
    while (true) {
        std::cout << "Введите сторону квадрата: ";
        if (std::cin >> side) {
            if (side > 0) break;
            else std::cout << "Сторона должна быть положительной!\n";
        } else {
            std::cout << "Ошибка ввода! Введите число.\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
    }

    // Создание объектов
    Circle circle(radius);
    Square square(side);

    // Сравнение площадей
    double circleArea = circle.getArea();
    double squareArea = square.getArea();

    std::cout << "\nПлощадь круга: " << circleArea << "\n";
    std::cout << "Площадь квадрата: " << squareArea << "\n";

    if (circleArea > squareArea) {
        std::cout << "Больше площадь круга.\n";
    } else if (circleArea < squareArea) {
        std::cout << "Больше площадь квадрата.\n";
    } else {
        std::cout << "Площади равны.\n";
    }

    return 0;
}
_____________________________________
4.13
#include <iostream>
#include <limits>

class Material {
private:
    double mass;
    double volume;

public:
    // Конструктор с проверкой на корректность
    Material(double m, double v) {
        if (v <= 0 || m <= 0) {
            throw std::invalid_argument("Масса и объем должны быть положительными!");
        }
        mass = m;
        volume = v;
    }

    // Метод вычисления плотности
    double getDensity() const {
        return mass / volume;
    }
};

class DensityComparator {
private:
    Material material1;
    Material material2;

public:
    // Конструктор принимает два материала
    DensityComparator(Material m1, Material m2) : material1(m1), material2(m2) {}

    // Метод сравнения плотностей
    void compare() const {
        double density1 = material1.getDensity();
        double density2 = material2.getDensity();

        if (density1 > density2) {
            std::cout << "Материал первого тела имеет большую плотность.\n";
        } else if (density1 < density2) {
            std::cout << "Материал второго тела имеет большую плотность.\n";
        } else {
            std::cout << "Плотности обоих материалов равны.\n";
        }
    }
};

// Функция ввода данных с проверкой
Material getInput(int index) {
    double mass, volume;
    while (true) {
        try {
            std::cout << "Тело " << index << ":\n";
            std::cout << "Масса (кг): ";
            std::cin >> mass;
            std::cout << "Объем (м³): ";
            std::cin >> volume;

            // Проверка корректности ввода
            if (std::cin.fail() || mass <= 0 || volume <= 0) {
                throw std::runtime_error("Ошибка: Введите положительные числа!");
            }

            return Material(mass, volume);
        } catch (const std::exception& e) {
            std::cout << e.what() << " Повторите ввод.\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
    }
}

int main() {
    try {
        Material mat1 = getInput(1);
        Material mat2 = getInput(2);

        DensityComparator comparator(mat1, mat2);
        comparator.compare();
    } catch (const std::exception& e) {
        std::cerr << "Критическая ошибка: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
_____________________________________
4.14
#include <iostream>
#include <limits>
#include <stdexcept>

class ElectricSegment {
private:
    double resistance; // Сопротивление в омах
    double voltage;    // Напряжение в вольтах

public:
    // Конструктор с проверкой корректности данных
    ElectricSegment(double r, double v) {
        if (r <= 0 || v <= 0) {
            throw std::invalid_argument("Сопротивление и напряжение должны быть положительными!");
        }
        resistance = r;
        voltage = v;
    }

    // Метод расчета тока по закону Ома I = U/R
    double getCurrent() const {
        return voltage / resistance;
    }
};

// Функция ввода данных для одного участка с обработкой ошибок
ElectricSegment getInputSegment(int segmentNumber) {
    double resistance, voltage;
    while (true) {
        try {
            std::cout << "Участок " << segmentNumber << ":\n";
            std::cout << "Введите сопротивление (Ом): ";
            std::cin >> resistance;
            std::cout << "Введите напряжение (Вольт): ";
            std::cin >> voltage;

            // Проверка корректности ввода
            if (std::cin.fail() || resistance <= 0 || voltage <= 0) {
                throw std::runtime_error("Ошибка: Введите положительные числа!");
            }

            return ElectricSegment(resistance, voltage);
        }
        catch (const std::exception& e) {
            std::cout << e.what() << "\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
    }
}

int main() {
    try {
        // Ввод данных для двух участков
        ElectricSegment segment1 = getInputSegment(1);
        ElectricSegment segment2 = getInputSegment(2);

        // Расчет токов
        double current1 = segment1.getCurrent();
        double current2 = segment2.getCurrent();

        // Сравнение и вывод результата
        if (current1 < current2) {
            std::cout << "Меньший ток протекает по первому участку.\n";
        } else if (current1 > current2) {
            std::cout << "Меньший ток протекает по второму участку.\n";
        } else {
            std::cout << "Токи в обоих участках равны.\n";
        }
    }
    catch (const std::exception& e) {
        std::cerr << "Критическая ошибка: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}