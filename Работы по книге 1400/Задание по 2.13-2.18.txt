2.13
#include <iostream>
#include <limits>

class DensityCalculator {
private:
    double mass;   // Масса тела (кг)
    double volume; // Объем тела (м³)

public:
    // Метод для ввода массы и объема
    void input_data() {
        while (true) {
            std::cout << "Введите массу тела (кг): ";
            std::cin >> mass;
            
            // Проверка на корректность ввода (например, буквы вместо чисел)
            if (std::cin.fail()) {
                std::cout << "Ошибка: Введите число!\n";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }

            std::cout << "Введите объем тела (м³): ";
            std::cin >> volume;

            // Проверка на корректность ввода
            if (std::cin.fail()) {
                std::cout << "Ошибка: Введите число!\n";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }

            // Проверка, что объем не равен нулю
            if (volume == 0) {
                std::cout << "Ошибка: Объем не может быть нулевым!\n";
                continue;
            }

            break;
        }
    }

    // Метод для расчета плотности (ρ = m/V)
    double calculate_density() const {
        return mass / volume;
    }
};

int main() {
    DensityCalculator calculator;
    calculator.input_data();
    double density = calculator.calculate_density();
    std::cout << "Плотность материала: " << density << " кг/м³" << std::endl;
    return 0;
}
___________________________________________
2.14
#include <iostream>
#include <cmath>
#include <limits>

class RightTriangle {
private:
    double a, b;  // Катеты треугольника

public:
    // Метод для ввода катетов
    void setSides() {
        while (true) {
            std::cout << "Введите катеты a и b (положительные числа): ";
            std::cin >> a >> b;

            // Проверка корректности ввода (например, буквы вместо чисел)
            if (std::cin.fail()) {
                std::cout << "Ошибка: Введите числа!" << std::endl;
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }

            // Проверка на положительные значения
            if (a <= 0 || b <= 0) {
                std::cout << "Ошибка: Катеты должны быть положительными!" << std::endl;
                continue;
            }

            break;
        }
    }

    // Метод для вычисления гипотенузы
    double getHypotenuse() const {
        return std::sqrt(a * a + b * b);
    }
};

int main() {
    RightTriangle triangle;
    triangle.setSides();
    std::cout << "Гипотенуза: " << triangle.getHypotenuse() << std::endl;
    return 0;
}
______________________________________________
2.15
#include <iostream>
#include <cmath>
#include <limits>

class RingArea {
private:
    double outerRadius;  // Внешний радиус
    double innerRadius;  // Внутренний радиус

public:
    // Метод для ввода радиусов с проверкой корректности
    void setRadii() {
        while (true) {
            std::cout << "Введите внешний радиус (R) и внутренний радиус (r): ";
            std::cin >> outerRadius >> innerRadius;

            // Проверка на корректность ввода (например, буквы вместо чисел)
            if (std::cin.fail()) {
                std::cout << "Ошибка: Введите числа!\n";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }

            // Проверка условий радиусов
            if (outerRadius <= 0 || innerRadius <= 0) {
                std::cout << "Ошибка: Радиусы должны быть положительными!\n";
            } else if (outerRadius <= innerRadius) {
                std::cout << "Ошибка: Внешний радиус должен быть больше внутреннего!\n";
            } else {
                break;
            }

            // Если условия не выполнены, повторяем ввод
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
    }

    // Метод для вычисления площади кольца
    double calculateArea() const {
        return M_PI * (std::pow(outerRadius, 2) - std::pow(innerRadius, 2));
    }
};

int main() {
    RingArea ring;
    ring.setRadii();
    double area = ring.calculateArea();
    std::cout.precision(2);  // Устанавливаем точность вывода
    std::cout << "Площадь кольца: " << area << " кв. единиц" << std::endl;
    return 0;
}
_____________________________________________
2.16
#include <iostream>
#include <cmath>
#include <limits>
#include <iomanip>  // Для установки точности вывода

class RightTriangle {
private:
    double a, b;  // Катеты треугольника

public:
    // Метод для ввода катетов
    void setSides() {
        while (true) {
            std::cout << "Введите катеты a и b (положительные числа): ";
            std::cin >> a >> b;

            // Проверка корректности ввода (например, буквы вместо чисел)
            if (std::cin.fail()) {
                std::cout << "Ошибка: Введите числа!\n";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }

            // Проверка на положительные значения
            if (a <= 0 || b <= 0) {
                std::cout << "Ошибка: Катеты должны быть положительными!\n";
                continue;
            }

            break;
        }
    }

    // Метод для вычисления гипотенузы
    double getHypotenuse() const {
        return std::sqrt(a * a + b * b);
    }

    // Метод для вычисления периметра
    double calculatePerimeter() const {
        return a + b + getHypotenuse();
    }
};

int main() {
    RightTriangle triangle;
    triangle.setSides();
    
    double perimeter = triangle.calculatePerimeter();
    
    std::cout << std::fixed << std::setprecision(2);  // Установка точности вывода
    std::cout << "Периметр треугольника: " << perimeter << " см" << std::endl;
    
    return 0;
}
_________________________________________
2.17
#include <iostream>
#include <cmath>
#include <limits>
#include <iomanip>

class IsoscelesTrapezoid {
private:
    double baseMajor;  // Большее основание (a)
    double baseMinor;  // Меньшее основание (b)
    double height;     // Высота (h)

public:
    // Метод для ввода параметров трапеции с проверкой корректности
    void setParameters() {
        while (true) {
            std::cout << "Введите большее основание (a), меньшее основание (b) и высоту (h): ";
            std::cin >> baseMajor >> baseMinor >> height;

            // Проверка на корректность ввода (например, буквы вместо чисел)
            if (std::cin.fail()) {
                std::cout << "Ошибка: Введите числа!\n";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }

            // Проверка условий:
            // 1. Все параметры должны быть положительными
            // 2. Большее основание должно быть больше меньшего
            if (baseMajor <= 0 || baseMinor <= 0 || height <= 0) {
                std::cout << "Ошибка: Все параметры должны быть положительными!\n";
            } else if (baseMajor <= baseMinor) {
                std::cout << "Ошибка: Большее основание должно быть больше меньшего!\n";
            } else {
                break;
            }

            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
    }

    // Метод для вычисления длины боковой стороны (по теореме Пифагора)
    double calculateSide() const {
        double halfDifference = (baseMajor - baseMinor) / 2.0;
        return std::sqrt(halfDifference * halfDifference + height * height);
    }

    // Метод для вычисления периметра
    double calculatePerimeter() const {
        double side = calculateSide();
        return baseMajor + baseMinor + 2 * side;
    }
};

int main() {
    IsoscelesTrapezoid trapezoid;
    trapezoid.setParameters();
    
    std::cout << std::fixed << std::setprecision(2);  // Установка точности вывода
    std::cout << "Периметр равнобедренной трапеции: " 
              << trapezoid.calculatePerimeter() << " единиц" << std::endl;
    
    return 0;
}